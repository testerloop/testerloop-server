type TestExecution implements Node & Event & IntervalEvent {
    id: ID!
    at: DateTime!
    until: DateTime!
    title: String!
    testRun: TestRun!
    environment: TestExecutionEnvironment!
    rerunOf: TestExecution
    reruns: [TestExecution!]! #TODO - MAKE THIS A TestExecutionConnection!
    events(
        first: Int
        after: Cursor
        filter: TestExecutionEventFilterInput
    ): TestExecutionEventConnection!
}

type TestExecutionConnection {
    totalCount: Int!
    edges: [TestExecutionEdge!]!
    pageInfo: PageInfo!
}

type TestExecutionEdge {
    cursor: Cursor!
    node: TestExecution # Only null if an error occurred in resolving the TestExecution
}

input TestExecutionEventFilterInput {
    type: [TestExecutionEventType!]
    consoleFilter: ConsoleEventFilterInput
    commandFilter: CommandEventFilterInput
    networkFilter: NetworkEventFilterInput
}

input ConsoleEventFilterInput {
    logLevel: [ConsoleLogLevel!]
    logSearch: String
}

input CommandEventFilterInput {
    status: [CommandEventStatus!]
}

input NetworkEventResponseStatusFilterInput {
    gte: Int
    lte: Int
}

input NetworkEventFilterInput {
    urlSearch: String
    resourceType: [HttpNetworkEventResourceType!]
    status: NetworkEventResponseStatusFilterInput
}

extend type Query {
    testExecution(id: ID!): TestExecution
}
