// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RunStatus {
  RUNNING
  COMPLETED
}

enum TestStatus {
  IN_PROGRESS
  PASSED
  FAILED
}

enum WorkerStatus {
  PENDING
  STARTED
  COMPLETED
}

enum Executor {
  ECS
  LAMBDA
  LOCAL
}

enum UserOrganisationRole {
  ADMIN
}

model Organisation {
  id                String             @id @default(uuid()) @db.Uuid
  name              String
  slug              String             @unique
  s3CustomPath      String
  s3BucketName      String
  s3Region          String
  testRuns          TestRun[]
  apiKeys           ApiKey[]
  userOrganisations UserOrganisation[]
}

model ApiKey {
  id             String       @id @default(uuid()) @db.Uuid
  prefix         String       @unique
  hashedKey      String       @unique
  name           String?
  isEnabled      Boolean      @default(true)
  organisationId String       @db.Uuid
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
}

model User {
  id                String             @id @default(uuid()) @db.Uuid
  email             String             @unique
  userOrganisations UserOrganisation[]
  firstName         String
  lastName          String
}

model UserOrganisation {
  id             String               @id @default(uuid()) @db.Uuid
  createdAt      DateTime             @default(now())
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String               @db.Uuid
  organisation   Organisation         @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId String               @db.Uuid
  role           UserOrganisationRole
}

model TestRun {
  id             String          @id @default(uuid()) @db.Uuid
  status         RunStatus
  createdAt      DateTime        @default(now())
  completedAt    DateTime?
  workers        Worker[]
  testExecutions TestExecution[]
  organisation   Organisation    @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId String          @db.Uuid
}

model TestExecutionGroup {
  id             String          @id @default(uuid()) @db.Uuid
  testName       String
  featureFile    String
  testExecutions TestExecution[]
}

model TestExecution {
  id                   String             @id @default(uuid()) @db.Uuid
  testName             String
  featureFile          String
  result               TestStatus
  at                   DateTime           @default(now())
  until                DateTime?
  testRunId            String             @db.Uuid
  testRun              TestRun            @relation(fields: [testRunId], references: [id])
  rerunOfId            String?            @db.Uuid
  rerunOf              TestExecution?     @relation("RerunOf", fields: [rerunOfId], references: [id])
  reruns               TestExecution[]    @relation("RerunOf")
  testExecutionGroupId String             @db.Uuid
  testExecutionGroup   TestExecutionGroup @relation(fields: [testExecutionGroupId], references: [id])
  workerId             String             @db.Uuid
  worker               Worker             @relation(fields: [workerId], references: [id])
}

model Worker {
  id             String          @id @default(uuid()) @db.Uuid
  status         WorkerStatus
  executor       Executor
  createdAt      DateTime        @default(now())
  startedAt      DateTime?
  completedAt    DateTime?
  testRunId      String          @db.Uuid
  testRun        TestRun         @relation(fields: [testRunId], references: [id])
  testExecutions TestExecution[]
}
