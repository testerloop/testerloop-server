// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RunStatus {
  RUNNING
  COMPLETED
}

enum TestStatus {
  PASSED
  FAILED
  IN_PROGRESS
}

model Organisation {
  id           String    @id @default(uuid()) @db.Uuid
  name         String
  slug         String    @unique
  s3CustomPath String
  s3BucketName String
  s3Region     String
  testRuns     TestRun[]
  apiKeys      ApiKey[]
}

model ApiKey {
  id             String       @id @default(uuid()) @db.Uuid
  apiKey         String
  isEnabled      Boolean
  organisationId String       @db.Uuid
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
}

model TestRun {
  id             String          @id @default(uuid()) @db.Uuid
  testExecutions TestExecution[]
  status         RunStatus
  organisationId String          @db.Uuid
  organisation   Organisation    @relation(fields: [organisationId], references: [id], onDelete: Cascade)
}

model TestExecutionGroup {
  id             String          @id @default(uuid()) @db.Uuid
  testExecutions TestExecution[]
}

model TestExecution {
  id                   String             @id @default(uuid()) @db.Uuid
  name                 String
  result               TestStatus
  at                   DateTime           @default(now())
  until                DateTime?
  testRunId            String             @db.Uuid
  testRun              TestRun            @relation(fields: [testRunId], references: [id])
  rerunOfId            String?            @db.Uuid
  rerunOf              TestExecution?     @relation("RerunOf", fields: [rerunOfId], references: [id])
  reruns               TestExecution[]    @relation("RerunOf")
  testExecutionGroupId String             @db.Uuid
  testExecutionGroup   TestExecutionGroup @relation(fields: [testExecutionGroupId], references: [id])
}
